/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Typi API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/ducng99/typi-api/1.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        this.configuration = configuration;
        this.basePath = configuration.basePath || this.basePath;
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ListFriends
 */
export interface ListFriends extends Array<User> {
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    Sender?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    Receiver?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    Content?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    Keysender?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    Keyreceiver?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    IV?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    Authtag?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    Sendtime?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    Username: string;
}
/**
 * ChatApi - fetch parameter creator
 * @export
 */
export const ChatApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get messages between current user and target user
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetMessagesTargetUsernameGet(targetUsername: string, options: any = {}): FetchArgs {
            // verify required parameter 'targetUsername' is not null or undefined
            if (targetUsername === null || targetUsername === undefined) {
                throw new RequiredError('targetUsername','Required parameter targetUsername was null or undefined when calling chatGetMessagesTargetUsernameGet.');
            }
            const localVarPath = `/chat/getMessages/{TargetUsername}`
                .replace(`{${"TargetUsername"}}`, encodeURIComponent(String(targetUsername)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a message to target user
         * @param {any} body 
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSendMessageTargetUsernamePost(body: any, targetUsername: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling chatSendMessageTargetUsernamePost.');
            }
            // verify required parameter 'targetUsername' is not null or undefined
            if (targetUsername === null || targetUsername === undefined) {
                throw new RequiredError('targetUsername','Required parameter targetUsername was null or undefined when calling chatSendMessageTargetUsernamePost.');
            }
            const localVarPath = `/chat/sendMessage/{TargetUsername}`
                .replace(`{${"TargetUsername"}}`, encodeURIComponent(String(targetUsername)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get messages between current user and target user
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetMessagesTargetUsernameGet(targetUsername: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Message>> {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).chatGetMessagesTargetUsernameGet(targetUsername, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Send a message to target user
         * @param {any} body 
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSendMessageTargetUsernamePost(body: any, targetUsername: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).chatSendMessageTargetUsernamePost(body, targetUsername, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get messages between current user and target user
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatGetMessagesTargetUsernameGet(targetUsername: string, options?: any) {
            return ChatApiFp(configuration).chatGetMessagesTargetUsernameGet(targetUsername, options)(fetch, basePath);
        },
        /**
         * Send a message to target user
         * @param {any} body 
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSendMessageTargetUsernamePost(body: any, targetUsername: string, options?: any) {
            return ChatApiFp(configuration).chatSendMessageTargetUsernamePost(body, targetUsername, options)(fetch, basePath);
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Get messages between current user and target user
     * @param {string} targetUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatGetMessagesTargetUsernameGet(targetUsername: string, options?: any) {
        return ChatApiFp(this.configuration).chatGetMessagesTargetUsernameGet(targetUsername, options)(this.fetch, this.basePath);
    }

    /**
     * Send a message to target user
     * @param {any} body 
     * @param {string} targetUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatSendMessageTargetUsernamePost(body: any, targetUsername: string, options?: any) {
        return ChatApiFp(this.configuration).chatSendMessageTargetUsernamePost(body, targetUsername, options)(this.fetch, this.basePath);
    }

}
/**
 * CredsApi - fetch parameter creator
 * @export
 */
export const CredsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User login
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsLoginPost(body: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling credsLoginPost.');
            }
            const localVarPath = `/creds/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsRegisterPost(body: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling credsRegisterPost.');
            }
            const localVarPath = `/creds/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredsApi - functional programming interface
 * @export
 */
export const CredsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * User login
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsLoginPost(body: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CredsApiFetchParamCreator(configuration).credsLoginPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register a new user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsRegisterPost(body: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CredsApiFetchParamCreator(configuration).credsRegisterPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CredsApi - factory interface
 * @export
 */
export const CredsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * User login
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsLoginPost(body: any, options?: any) {
            return CredsApiFp(configuration).credsLoginPost(body, options)(fetch, basePath);
        },
        /**
         * Register a new user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credsRegisterPost(body: any, options?: any) {
            return CredsApiFp(configuration).credsRegisterPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * CredsApi - object-oriented interface
 * @export
 * @class CredsApi
 * @extends {BaseAPI}
 */
export class CredsApi extends BaseAPI {
    /**
     * User login
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredsApi
     */
    public credsLoginPost(body: any, options?: any) {
        return CredsApiFp(this.configuration).credsLoginPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * Register a new user
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredsApi
     */
    public credsRegisterPost(body: any, options?: any) {
        return CredsApiFp(this.configuration).credsRegisterPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * SessionsApi - fetch parameter creator
 * @export
 */
export const SessionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Extend TTL for the current session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsKeepAlivePut(options: any = {}): FetchArgs {
            const localVarPath = `/sessions/keepAlive`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutDelete(options: any = {}): FetchArgs {
            const localVarPath = `/sessions/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify an existing Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsVerifyGet(options: any = {}): FetchArgs {
            const localVarPath = `/sessions/verify`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Extend TTL for the current session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsKeepAlivePut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsKeepAlivePut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutDelete(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsLogoutDelete(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Verify an existing Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsVerifyGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsVerifyGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Extend TTL for the current session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsKeepAlivePut(options?: any) {
            return SessionsApiFp(configuration).sessionsKeepAlivePut(options)(fetch, basePath);
        },
        /**
         * Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutDelete(options?: any) {
            return SessionsApiFp(configuration).sessionsLogoutDelete(options)(fetch, basePath);
        },
        /**
         * Verify an existing Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsVerifyGet(options?: any) {
            return SessionsApiFp(configuration).sessionsVerifyGet(options)(fetch, basePath);
        },
    };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
    /**
     * Extend TTL for the current session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsKeepAlivePut(options?: any) {
        return SessionsApiFp(this.configuration).sessionsKeepAlivePut(options)(this.fetch, this.basePath);
    }

    /**
     * Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsLogoutDelete(options?: any) {
        return SessionsApiFp(this.configuration).sessionsLogoutDelete(options)(this.fetch, this.basePath);
    }

    /**
     * Verify an existing Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsVerifyGet(options?: any) {
        return SessionsApiFp(this.configuration).sessionsVerifyGet(options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a friend request
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAcceptTargetUsernamePost(targetUsername: string, options: any = {}): FetchArgs {
            // verify required parameter 'targetUsername' is not null or undefined
            if (targetUsername === null || targetUsername === undefined) {
                throw new RequiredError('targetUsername','Required parameter targetUsername was null or undefined when calling usersFriendsAcceptTargetUsernamePost.');
            }
            const localVarPath = `/users/friends/accept/{TargetUsername}`
                .replace(`{${"TargetUsername"}}`, encodeURIComponent(String(targetUsername)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add new friend
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAddTargetUsernamePost(targetUsername: string, options: any = {}): FetchArgs {
            // verify required parameter 'targetUsername' is not null or undefined
            if (targetUsername === null || targetUsername === undefined) {
                throw new RequiredError('targetUsername','Required parameter targetUsername was null or undefined when calling usersFriendsAddTargetUsernamePost.');
            }
            const localVarPath = `/users/friends/add/{TargetUsername}`
                .replace(`{${"TargetUsername"}}`, encodeURIComponent(String(targetUsername)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of accepted friends of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsGet(options: any = {}): FetchArgs {
            const localVarPath = `/users/friends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of friend requests of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsRequestsGet(options: any = {}): FetchArgs {
            const localVarPath = `/users/friends/requests`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update relationship with the target user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsUpdateRelationshipPut(body: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersFriendsUpdateRelationshipPut.');
            }
            const localVarPath = `/users/friends/updateRelationship`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user info from session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options: any = {}): FetchArgs {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET', credentials: 'include' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("SESSION_ID")
					: configuration.apiKey;
                localVarQueryParameter["SESSION_ID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Accept a friend request
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAcceptTargetUsernamePost(targetUsername: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersFriendsAcceptTargetUsernamePost(targetUsername, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add new friend
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAddTargetUsernamePost(targetUsername: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersFriendsAddTargetUsernamePost(targetUsername, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of accepted friends of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListFriends> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersFriendsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of friend requests of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsRequestsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListFriends> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersFriendsRequestsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update relationship with the target user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsUpdateRelationshipPut(body: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersFriendsUpdateRelationshipPut(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get current user info from session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersMeGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Accept a friend request
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAcceptTargetUsernamePost(targetUsername: string, options?: any) {
            return UsersApiFp(configuration).usersFriendsAcceptTargetUsernamePost(targetUsername, options)(fetch, basePath);
        },
        /**
         * Add new friend
         * @param {string} targetUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsAddTargetUsernamePost(targetUsername: string, options?: any) {
            return UsersApiFp(configuration).usersFriendsAddTargetUsernamePost(targetUsername, options)(fetch, basePath);
        },
        /**
         * Get a list of accepted friends of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsGet(options?: any) {
            return UsersApiFp(configuration).usersFriendsGet(options)(fetch, basePath);
        },
        /**
         * Get a list of friend requests of current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsRequestsGet(options?: any) {
            return UsersApiFp(configuration).usersFriendsRequestsGet(options)(fetch, basePath);
        },
        /**
         * Update relationship with the target user
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFriendsUpdateRelationshipPut(body: any, options?: any) {
            return UsersApiFp(configuration).usersFriendsUpdateRelationshipPut(body, options)(fetch, basePath);
        },
        /**
         * Get current user info from session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any) {
            return UsersApiFp(configuration).usersMeGet(options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Accept a friend request
     * @param {string} targetUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFriendsAcceptTargetUsernamePost(targetUsername: string, options?: any) {
        return UsersApiFp(this.configuration).usersFriendsAcceptTargetUsernamePost(targetUsername, options)(this.fetch, this.basePath);
    }

    /**
     * Add new friend
     * @param {string} targetUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFriendsAddTargetUsernamePost(targetUsername: string, options?: any) {
        return UsersApiFp(this.configuration).usersFriendsAddTargetUsernamePost(targetUsername, options)(this.fetch, this.basePath);
    }

    /**
     * Get a list of accepted friends of current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFriendsGet(options?: any) {
        return UsersApiFp(this.configuration).usersFriendsGet(options)(this.fetch, this.basePath);
    }

    /**
     * Get a list of friend requests of current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFriendsRequestsGet(options?: any) {
        return UsersApiFp(this.configuration).usersFriendsRequestsGet(options)(this.fetch, this.basePath);
    }

    /**
     * Update relationship with the target user
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFriendsUpdateRelationshipPut(body: any, options?: any) {
        return UsersApiFp(this.configuration).usersFriendsUpdateRelationshipPut(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get current user info from session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeGet(options?: any) {
        return UsersApiFp(this.configuration).usersMeGet(options)(this.fetch, this.basePath);
    }

}
