/**
 * Typi API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ChatApi", () => {
  let instance: api.ChatApi
  beforeEach(function() {
    instance = new api.ChatApi(config)
  });

  test("chatGetMessagesTargetUserIDGet", () => {
    const targetUserID: number = 1.2
    return expect(instance.chatGetMessagesTargetUserIDGet(targetUserID, {})).resolves.toBe(null)
  })
  test("chatSendMessageTargetUserIDPost", () => {
    const targetUserID: number = 56
    return expect(instance.chatSendMessageTargetUserIDPost(targetUserID, {})).resolves.toBe(null)
  })
})

describe("CredsApi", () => {
  let instance: api.CredsApi
  beforeEach(function() {
    instance = new api.CredsApi(config)
  });

  test("credsLoginPost", () => {
    const body: api.any = undefined
    return expect(instance.credsLoginPost(body, {})).resolves.toBe(null)
  })
  test("credsRegisterPost", () => {
    const body: api.any = undefined
    return expect(instance.credsRegisterPost(body, {})).resolves.toBe(null)
  })
})

describe("SessionsApi", () => {
  let instance: api.SessionsApi
  beforeEach(function() {
    instance = new api.SessionsApi(config)
  });

  test("sessionsKeepAlivePut", () => {
    return expect(instance.sessionsKeepAlivePut({})).resolves.toBe(null)
  })
  test("sessionsVerifyGet", () => {
    return expect(instance.sessionsVerifyGet({})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersFriendsAddTargetUsernamePost", () => {
    const targetUsername: string = "targetUsername_example"
    return expect(instance.usersFriendsAddTargetUsernamePost(targetUsername, {})).resolves.toBe(null)
  })
  test("usersFriendsGet", () => {
    return expect(instance.usersFriendsGet({})).resolves.toBe(null)
  })
  test("usersFriendsRequestsGet", () => {
    return expect(instance.usersFriendsRequestsGet({})).resolves.toBe(null)
  })
  test("usersFriendsUpdateRelationshipPut", () => {
    const body: api.any = undefined
    return expect(instance.usersFriendsUpdateRelationshipPut(body, {})).resolves.toBe(null)
  })
  test("usersMeGet", () => {
    return expect(instance.usersMeGet({})).resolves.toBe(null)
  })
})

